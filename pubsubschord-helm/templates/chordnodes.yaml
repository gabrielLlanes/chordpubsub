apiVersion: v1
kind: ConfigMap
metadata:
  name: database-env
data:
  DB_URL_FILE_LOCATION: "/db-config/db-url"
  DB_USERNAME_FILE_LOCATION: "/db-config/db-username"
  DB_TABLE_FILE_LOCATION: "/db-config/db-table"
  DB_PASSWORD_FILE_LOCATION: "/db-config/db-password"
{{- range .Values.deployments }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "node{{ .number }}-config"
data:
  CHORD_DEGREE: "12"
  CHORD_HOSTNAME: "node{{ .number }}"
  CHORD_FIRST_NODE: {{ .chordFirstNode | quote }}
  RMI_PORT: "1099"
  {{- if not .chordFirstNode }}
  CHORD_JOIN_NODE_HOSTNAME: "node{{ .chordJoinNodeHostNumber }}"
  CHORD_JOIN_NODE_PORT: "1099"
  {{- end }}
  NOTIFICATION_NAME: {{ .notificationName | quote }}
  HTTP_REQUEST_FILE_LOCATION: "/my-config/http-request-uri"
  HTTP_REQUEST_PERIOD: {{ .httpRequestPeriod  | quote }}
---
apiVersion: v1
kind: Service
metadata:
  name: "node{{ .number }}"
spec:
  type: ClusterIP
  selector:
    app: "node{{ .number }}-pod"
  ports:
    - name: port-8080
      port: 8080
      targetPort: 8080
      protocol: TCP
    - name: rmi-port
      port: 1099
      targetPort: 1099
      protocol: TCP
    - name: hazelcast
      port: 5701

---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: "node{{ .number }}-deployment"
  name: "node{{ .number }}-deployment"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "node{{ .number }}-pod"
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: "node{{ .number }}-pod"
    spec:
      volumes:
        - name: my-disk
          emptyDir: {}
        - name: http-request-uri
          secret:
            secretName: http-request-uri
            items:
              - key: "http-request-uri-node{{ .number }}"
                path: http-request-uri
        - name: database-config
          secret:
            secretName: dbinfo
            items:
              - key: db-url
                path: db-url
              - key: db-username
                path: db-username
              - key: db-password
                path: db-password
              - key: table-node1
                path: db-table
      containers:
        - image: {{ template "image-name" }}
          imagePullPolicy: Always
          name: "node{{ .number }}-container"
          command: ["java", "-jar", "/app/app.jar"]
          envFrom:
            - configMapRef:
                name: "node{{ .number }}-config"
                optional: false
            - configMapRef:
                name: database-env
                optional: false
          volumeMounts:
            - name: my-disk
              mountPath: /my-data
            - name: http-request-uri
              mountPath: /my-config
            - name: database-config
              mountPath: /db-config
          resources: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
status: {}
{{- end }}
---